{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAmBvC,OAhBgB,IAAIC,SAAQ,CAACC,EAASC,KACrCC,YAAW,KACNN,EACHI,EAAQ,CACPN,SAAUA,EACVC,MAAOA,IAGRM,EAAO,CACNP,SAAUA,EACVC,MAAOA,GACN,GAEDA,EAAM,G,CAQX,MAAMQ,EAASC,SAASC,cAAc,SAChCC,EAAeF,SAASC,cAAc,gBACtCE,EAAcH,SAASC,cAAc,eACrCG,EAAgBJ,SAASC,cAAc,iBAG7CF,EAAOM,iBAAiB,UAAWC,IAClCA,EAAMC,iBAEN,IAAIC,EAAgBC,SAASP,EAAaQ,OAC1C,MAAMC,EAAaF,SAASN,EAAYO,OACxC,IAAIE,EAAgB,EAEpB,IAAK,IAAIC,EAAQT,EAAcM,MAAOG,EAAQ,EAAGA,GAAS,EAGzDxB,EAFAuB,GAAiB,EAEYJ,GAC3BM,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAExE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MACnBwB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoB7B,QAAeC,MAAU,IAGvEiB,GAAiBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Add all Notiflix\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n\t// 4. Work with create promise\n\tconst promise = new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tif (shouldResolve) {\n\t\t\t\tresolve({\n\t\t\t\t\tposition: position,\n\t\t\t\t\tdelay: delay,\n\t\t\t\t}); \n\t\t\t} else {\n\t\t\t\treject({\n\t\t\t\t\tposition: position,\n\t\t\t\t\tdelay: delay,\n\t\t\t\t}); \n\t\t\t}\n\t\t}, delay);\n\t});\n\n\treturn promise;\n}\n\n\n// 1. Recieve elements from HTML\nconst elForm = document.querySelector(\".form\");\nconst elInputDelay = document.querySelector(\"[name=delay]\");\nconst elInputStep = document.querySelector(\"[name=step]\");\nconst elInputAmount = document.querySelector(\"[name=amount]\");\n\n// 3. Write script which at Submit moment use fun createPromise\nelForm.addEventListener(\"submit\", (event) => {\n\tevent.preventDefault();\n\t\n\tvar delayInterval = parseInt(elInputDelay.value);\n\tconst stepNumber = parseInt(elInputStep.value);\n\tvar promiseNumber = 0;\n\n\tfor (let index = elInputAmount.value; index > 0; index -= 1) {\n\t\tpromiseNumber += 1;\n\n\t\tcreatePromise(promiseNumber, delayInterval)\n\t\t\t.then(({ position, delay }) => {\n\t\t\t\tNotiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n\t\t\t})\n\t\t\t.catch(({ position, delay }) => {\n\t\t\t\tNotiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n\t\t\t});\n\n\t\tdelayInterval += stepNumber;\n\t}\n});\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$elForm","document","querySelector","$47d4ff9957288465$var$elInputDelay","$47d4ff9957288465$var$elInputStep","$47d4ff9957288465$var$elInputAmount","addEventListener","event","preventDefault","delayInterval","parseInt","value","stepNumber","promiseNumber","index","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.47d38671.js.map"}